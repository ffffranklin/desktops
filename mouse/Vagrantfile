# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # @inspired by https://stackoverflow.com/questions/17845637/how-to-change-vagrant-default-machine-name
  box_name = "mouse"

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/freebsd12"

  # Declare vagrant box name
  config.vm.define box_name

  # Declare vagrant hostname
  config.vm.hostname = box_name

  config.vm.base_mac = "8DC300AA98E1"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = "1024"

    # Set ui name
    vb.name = box_name
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    # Update FreeBSD
    sudo freebsd-update fetch && sudo freebsd-update install

    # Force update port binaries
    sudo pkg update -f

    # Install guest additions
    sudo pkg install -y virtualbox-ose-additions

    # Install input drivers for keyboard and mouse
    sudo pkg install -y xf86-input-libinput xf86-input-evdev

    # Install git
    sudo pkg install -y git rsync

    # Install x
    # - seem to need xterm to run $ startx [something]
    # - xterm seems to need xauth
    sudo pkg install -y xinit xorg-server xterm xauth xfce

    # Configure X11
    sudo Xorg -configure
    sudo mkdir /etc/X11; sudo cp /root/xorg.conf.new /etc/X11/xorg.conf

    # Fix input controls and configure evdev driver
    grep -qF -- 'kern.evdev.rcpt_mask=6' /etc/sysctl.conf || sudo echo '\n# Fix input devices like mouse - inserted by provision script\nkern.evdev.rcpt_mask=6' >> /etc/sysctl.conf

    # Configure XFCE
    # - @inspiredby https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/x11-wm.html
    grep -qF -- 'dbus_enable="YES"' /etc/rc.conf || sudo echo '\n# XFCE uses D-Bus for a message bus - inserted by provision script\ndbus_enable="YES"' >> /etc/rc.conf
    touch /home/vagrant/.xinitrc
    grep -qF -- '. /usr/local/etc/xdg/xfce4/xinitrc' /home/vagrant/.xinitrc || sudo echo '\n# XFCE - inserted by provision script\n. /usr/local/etc/xdg/xfce4/xinitrc' >> /home/vagrant/.xinitrc

    # Install browser
    sudo pkg install -y firefox

    sudo shutdown -r now
  SHELL
end
